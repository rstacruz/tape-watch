#!/usr/bin/env node
var chokidar = require('chokidar')
var debounce = require('debounce-collect')
var path = require('path')
var once = require('once')
var debug = require('debug')('tape-watch')
var mutex = require('../lib/mutex')
var wait = require('../lib/wait')
var glob = require('thenify')(require('glob'))

var cli = require('meow')([
  'Usage:',
  '  $ tape-watch <files> [options] -- [options for the test]',
  '',
  'Options:',
  '  -p, --pipe PACKAGE        pipe to this package',
  '  -o, --out CMD             output to this file/cmd',
  '  -R, --refresh PACKAGE     ensure this PACKAGE gets refreshed',
  '  -r, --require PACKAGE     require a PACKAGE before startup',
  '',
  'Other options:',
  '  -h, --help                show usage information',
  '  -v, --version             print version info and exit',
  '',
  'For examples and docs, see:',
  '  ' + require('../package.json').homepage
].join('\n'), {
  boolean: ['help', 'version'],
  string: ['pipe', 'out', 'refresh', 'require'],
  '--': true,
  alias: {
    h: 'help', v: 'version', p: 'pipe', o: 'out', R: 'refresh',
    r: 'require'
  }
})

var filenames = cli.input
var cwd = process.cwd()
process.argv = cli.input.slice(1)

if (filenames.length === 0) {
  console.error('Usage: tape-watch <filename>')
  console.error('See `tape-watch --help` for more options.')
  process.exit(1)
}

if (cli.flags.require) {
  requireMany(cli.flags.require)
}

var report = debounce(mutex(function (files) {
  debug('start', files && files.map(function (file) { return file[0] }))

  return invoke()
    .then(function (ok) {
      debug('done')
    })
    .catch(function (err) {
      debug('error')
      console.error(err.stack || err.message || err)
    })
    .then(function () {
      // cleanup
    })
    .then(wait(250))
    .then(function () {
      debug('listening again')
    })
}), 25)

/*
 * invoke the test. installs a tape hook to listen for when tests finish.
 */

var invoke = function (options) {
  return new Promise(function (resolve, reject) {
    debug('filenames:', filenames)
    var required = []
    Promise.all(toArray(filenames).map(function (spec) {
      return glob(spec).then(function (files) {
        files.forEach(function (fname) {
          debug('processed', fname)
          required.push(path.join(cwd, fname))
        })
      })
    }))
    .then(function () {
      debug('filename processing finished')
      flush()
      var stream = tape().createStream()

      if (cli.flags.pipe) {
        stream = stream.pipe(requireHere(cli.flags.pipe)())
      }

      if (cli.flags.out) {
        stream = stream.pipe(require('outpipe')(cli.flags.out))
      }

      stream.pipe(process.stdout)
      tape().onFinish(once(function () {
        debug('tape finished')
        try { tape().getHarness().close() } catch (e) {}
        resolve()
      }))
      required.forEach(function (fpath) {
        debug('requiring test', fpath)
        require(fpath)
      })
    })
    .catch(reject)
  })
}

/*
 * Requires a package relative to the project dir.
 */

function requireHere (pkg) {
  return require(path.join(cwd, 'node_modules', pkg))
}

/*
 * Returns the `tape` module as the project sees it.
 */

function tape () {
  return requireHere('tape')
}

/*
 * Delete require cache for any app code (non-modules) and tape itself.
 * We need to clear out tape so that its state is reset.
 */

function flush () {
  Object.keys(require.cache).forEach(function (fname) {
    if (fname.indexOf('node_modules') === -1) {
      delete require.cache[fname]
    }

    var mods = ['tape'].concat(toArray(cli.flags.refresh))
    mods.forEach(function (mod) {
      if (fname.indexOf(path.join(cwd, mod) + path.sep) > -1 ||
        fname.indexOf(path.join(cwd, 'node_modules', mod) + path.sep) > -1) {
        delete require.cache[fname]
      }
    })
  })
}

function toArray (list) {
  if (!list) return []
  return Array.isArray(list) ? list : [ list ]
}

/*
 * Requires many modules at once.
 *
 *     requireMany(['babel-register', 'coffee-script/register'])
 *     requireMany('babel-register')
 */

function requireMany (modules) {
  toArray(modules).forEach(function (mod) {
    debug('require', mod)
    requireHere(mod)
  })
}

/*
 * Run
 */

process.on('uncaughtException', function (err) {
  console.error(err.stack || err.message || err)
})

var watcher = chokidar.watch('.', {
  ignored: /[\/\\]\.|node_modules/,
  persistent: true,
  ignoreInitial: true
})

watcher.on('change', report)
watcher.on('add', report)
watcher.on('unlink', report)
report()
